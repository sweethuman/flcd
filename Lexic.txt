Language Specification
    1. Alphabet
        a. Upper(A-Z) and lower case letters(a-z) of the english alphabet
        b. Underline character ‘_’
        c. Decimal digits (0-9)
    2. Lexic
        a. Special symbols:
            i. Operators: arithmetic(+,-,*,/,%) , assigment(=), boolean logic(!,&&,||), increment and decrement(++,--), comparison(==, !=,<,<=,>,>=), sequencing:
            ii. Separators: \n,:,\tab,;
            iii. Reserved words: int, bool, string, char, const, if, else, return, true, false, print, call, define, read, write, while, break
        b. Identifiers:
            i. A sequence of letters and digits, such that the first character is a letter, the rule is:
                identifier := letter[{letter|digit}]
                letter := “A”|”B”|…|”Z”|”a”|”b”|…|”z”
                digit := “0”|”1”|”2”|…|”9”
        c. Constants
            i. Integer:
                integer := “0”| ["+"|"-"] non_zero_digit{digit}
                non_zero_digit := "1"|"2"|...|"9"
                noconst::=[(+|-)] non_zero_number|"0"
                non_zero_number::=non_zero_digit{no}
                no::=digit{no}
            ii. Float:
                float := integer [. digit {digit}]
            iii. Character:
                char := 'letter'|'digit'
            iv. String:
                string := """{character}"""
            v. Boolean:
                boolean := “true” | “false”
true := “1”
false := “0”
    3. Syntax
        a. Syntactical Rules
            program := statement_list
            statement_list := statement “\n” [{statement}]
            statement := declaration | simple_statement | struct_statement
            declaration := type identifier [{“,”identifier}]
            type := primary_type
            primary_type := “int” | “float” | “bool” | “string” | “char”
            operation := “+” | “-” | “*” | “/” | “%”
            relation := “<” | “<=” | “==” | “!=” | “>=” | “>” | “&&” | “||”
            boolean_relation := “&&” | “||”
            condition := (expression relation expression) | (condition boolean_relation condition)
            simple_statement := assignment | io_statement
            assignment := identifier “=” expression | identifier”++” | identifier”--”
            expression := term | expression operation term
            term := identifier | constant
            io_statement := “read” | “write” | “print” “ “ identifier [{“,”[“ “] identifier}]
            struct_statement := if_statement | while_statement | for_statement
            if_statement := “if” condition “:\n\tab” statement [{“\n\tab”statement}] ”\n” “else:\n\tab” statement [{“\n\tab”statement}]
            while_statement := “while” condition “:\n\tab” statement [{“\n\tab”statement}]
            for_statement := “for” assigment; condition; assignment”:\n\tab” statement [{“\n\tab”statement}]
        b. Lexical rules:
            identifier ::= letter[{letter | digit}]
            letter ::= "A"|"B"|...|"Z"|"a"|"b"|...|"z"
            digit ::= "0"|"1"|...|"9"

  identifier::=letter|letter{letter}{digit}
        program::= "Begin" cmpdstmt
        decllist ::= declaration | declaration ";" decllist
        declaration ::= lidentifier ":" type
        type::= "int"| "string"
        lidentifier::= id| id ","  lidentifier;
        arraydeclarations::="array" "[" nr "]" ":" type
        cmpdstmt = "{" stmtlist "}"
        stmtlist ::= stmt | stmt ";" stmtlist
        stmt ::= simplstmt | structstmt
        simplstmt ::= assignstmt | iostmt
        assignstmt ::= identifier ":=" expression
        expression ::= term |expression operation term
        term ::= identifier | constant
        factor ::= "(" expression ")" | identifier
        iostmt ::= "read"  "(" identifier ")" | "write" "(" identifier ")"
        structstmt ::= cmpdstmt | ifstmt | whilestmt
        ifstmt ::= "if" condition stmt ["else" stmt]
        whilestmt ::= "while" condition "do" stmt
        condition ::=  "(" expression relation expression ")"
        relation ::= "<" | "<=" | "=" | "<>" | ">=" | ">"